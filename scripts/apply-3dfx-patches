#!/bin/bash
set -e  # Exit on any error

# Parse arguments
AUTO_YES=0
QEMU_SRC=""

# Process command line arguments
for arg in "$@"; do
  if [ "$arg" = "-y" ] || [ "$arg" = "--yes" ]; then
    AUTO_YES=1
  elif [ -z "$QEMU_SRC" ]; then
    QEMU_SRC="$arg"
  fi
done

# Check if source directory is provided
if [ -z "$QEMU_SRC" ]; then
  echo "Error: Please specify the QEMU source directory"
  echo "Usage: apply-3dfx-patches [--yes] /path/to/qemu-src"
  exit 1
fi

if [ ! -d "$QEMU_SRC" ]; then
  echo "Error: QEMU source directory not found: $QEMU_SRC"
  exit 1
fi

# Check if SDL2 is recent enough to already have virgl patches
SDL_VERSION=$(sdl2-config --version)
SDL_MAJOR=$(echo $SDL_VERSION | cut -d. -f1)
SDL_MINOR=$(echo $SDL_VERSION | cut -d. -f2)

# SDL 2.28.0 or newer might have the virgl patches incorporated
if [ "$SDL_MAJOR" -gt 2 ] || ([ "$SDL_MAJOR" == 2 ] && [ "$SDL_MINOR" -ge 28 ]); then
  echo "Note: Your SDL2 version ($SDL_VERSION) might already include virgl patches."
  echo "Some of the patches might not be necessary or could conflict."
  
  # Only prompt if not in auto-yes mode and terminal is interactive
  if [ "$AUTO_YES" -eq 0 ] && [ -t 0 ]; then
    read -p "Do you want to continue applying the patches? (y/n) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
      echo "Patch application aborted."
      exit 1
    fi
  else
    echo "Continuing with patch application (auto-yes mode or non-interactive environment)."
  fi
fi

# Define the patch directory
PATCH_DIR="$(brew --prefix)/opt/qemu-virgl-deps/patches"

# Verify that the patch directory exists
if [ ! -d "$PATCH_DIR" ]; then
  echo "Error: Patch directory not found: $PATCH_DIR"
  exit 1
fi

# Apply the virgl patches
echo "Applying virgl patches from $PATCH_DIR..."

# When applying the EGL optional patch:
if [ -f "$PATCH_DIR/egl-optional.patch" ]; then
  echo "Applying EGL optional patch..."
  if ! patch -p1 -d "$QEMU_SRC" --force < "$PATCH_DIR/egl-optional.patch"; then
    echo "Warning: EGL optional patch didn't apply cleanly."
    echo "Examining the rejected hunks..."
    
    # Try to find and apply the specific change we need
    if [ -f "$QEMU_SRC/meson.build.rej" ]; then
      echo "Found reject file. Attempting manual fix..."
      
      # Manually make the key change - make EGL optional when OpenGL Core is enabled
      sed -i '' 's/if not cc.has_header('\''epoxy\/egl.h'\'', dependencies: epoxy)/need_egl = not get_option('\''opengl_core'\'').enabled()\n  if need_egl and not cc.has_header('\''epoxy\/egl.h'\'', dependencies: epoxy)/' "$QEMU_SRC/meson.build"
      
      echo "Manual fix attempted. Please check $QEMU_SRC/meson.build to verify."
    else
      echo "No reject file found. The patch might be partially applied."
    fi

    # Additional manual patching logic
    if [ -f meson.build.rej ]; then
      echo "Found rejected hunks, attempting to apply manually..."
      # Find the line that tests for EGL headers
      LINE_NUM=$(grep -n "if cc.has_header('epoxy/egl.h'" meson.build | cut -d':' -f1)
      if [ -n "$LINE_NUM" ]; then
        # Insert the need_egl variable before the test
        sed -i "${LINE_NUM}i\\  # Make EGL headers optional when using OpenGL Core\\n  need_egl = not get_option('opengl_core').enabled()\\n" meson.build
        # Modify the if condition
        sed -i "${LINE_NUM}s/if cc.has_header/if (not need_egl) or cc.has_header/" meson.build
        echo "Manual patch applied successfully"
      else
        echo "ERROR: Could not find the EGL header check in meson.build"
      fi
    fi
  else
    echo "EGL optional patch applied successfully."
  fi
else
  echo "Warning: EGL optional patch not found at $PATCH_DIR/egl-optional.patch"
fi

# Apply Virgil3D with SDL2 OpenGL patch
if [ -f "$PATCH_DIR/0001-Virgil3D-with-SDL2-OpenGL.patch" ]; then
  echo "Applying Virgil3D with SDL2 OpenGL patch..."
  patch -p1 -d "$QEMU_SRC" < "$PATCH_DIR/0001-Virgil3D-with-SDL2-OpenGL.patch" || {
    echo "Warning: SDL2 OpenGL patch failed, it may already be applied."
  }
fi

echo "Patches applied. Now you can build QEMU with: compile-qemu-virgl $QEMU_SRC"
