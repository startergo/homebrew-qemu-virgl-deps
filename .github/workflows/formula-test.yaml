name: Formula Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  opengl-core-build:
    runs-on: macos-latest
    name: OpenGL Core build
    
    steps:
    # Step 1: Check out the repository
    - name: Checkout repository
      uses: actions/checkout@v4

    # Step 1.1: Enable GitHub Actions debug logging
    - name: Enable GitHub Actions debug logging
      run: echo "ACTIONS_RUNNER_DEBUG=true" >> $GITHUB_ENV

    # Step 2: Basic formula check
    - name: Check formula syntax
      run: |
        echo "Checking formula for syntax..."
        ruby -c Formula/qemu-virgl-deps.rb
        brew style Formula/qemu-virgl-deps.rb || true

    # Step 3: Tap the repository
    - name: Tap the repository
      run: |
        brew tap startergo/homebrew-qemu-virgl-deps

    # Step 4: Install the formula with OpenGL Core
    - name: Install formula with OpenGL Core
      run: |
        echo "Installing with OpenGL Core profile..."
        brew install startergo/qemu-virgl-deps/qemu-virgl-deps --with-opengl-core

    # Step 4.5: Ensure helper scripts are in PATH
    - name: Setup PATH for helper scripts
      run: |
        # Add the formula's bin directory to PATH
        export PATH="$(brew --prefix)/opt/qemu-virgl-deps/bin:$PATH"
        echo "PATH=$PATH" >> $GITHUB_ENV
        
        # Check if the scripts exist and are executable
        ls -la $(brew --prefix)/opt/qemu-virgl-deps/bin/
        
        # Test if we can find the scripts now
        which fetch-qemu-version || echo "fetch-qemu-version not found"
        which apply-3dfx-patches || echo "apply-3dfx-patches not found"
        which compile-qemu-virgl || echo "compile-qemu-virgl not found"
        which qemu-virgl || echo "qemu-virgl not found"

    # Step 5: Fetch QEMU source
    - name: Fetch QEMU source
      run: |
        export PATH="$(brew --prefix)/opt/qemu-virgl-deps/bin:$PATH"
        fetch-qemu-version 8.2.10 source/qemu

    # Step 6: Apply 3D enhancement patches
    - name: Apply 3D enhancement patches
      run: |
        apply-3dfx-patches source/qemu

    # Step 7: Check meson.build content
    - name: Check meson.build content
      run: |
        cd source/qemu
        grep -A10 -B5 "cc.has_header('epoxy/egl.h'" meson.build

    # Step 7.1: Apply manual fix for OpenGL Core
    - name: Apply manual fix for OpenGL Core
      run: |
        cd source/qemu
        # First add the opengl_core option to meson_options.txt
        sed -i "" "/option('opengl'.*)/a\\
        option('opengl_core', type: 'boolean', value: false,\\
               description: 'Use OpenGL Core profile instead of EGL')\\
        " meson_options.txt
        
        # Then update the meson.build file to use this option
        LINE_NUM=$(grep -n "if cc.has_header('epoxy/egl.h'" meson.build | cut -d':' -f1)
        if [ -n "$LINE_NUM" ]; then
          # Insert the need_egl variable before the test
          sed -i "" "${LINE_NUM}i\\
          # Make EGL headers optional when using OpenGL Core\\
          need_egl = not get_option('opengl_core')\\
          " meson.build
          # Modify the if condition
          sed -i "" "s/if cc.has_header/if (not need_egl) or cc.has_header/g" meson.build
          echo "Manual patch applied successfully"
          grep -A10 -B5 "cc.has_header('epoxy/egl.h'" meson.build
        else
          echo "ERROR: Could not find the EGL header check in meson.build"
          exit 1
        fi

    # Step 7.2: Add opengl_core option to meson_options.txt
    - name: Add opengl_core option to meson_options.txt
      run: |
        cd source/qemu
        echo 'option('\''opengl_core'\'', type: '\''boolean'\'', value: false, description: '\''Use OpenGL Core profile instead of EGL'\'')' >> meson_options.txt
        
        # Verify the option was added
        grep "opengl_core" meson_options.txt

        # Then update meson.build to use the option
        sed -i '' '/if cc.has_header('\''epoxy\/egl.h'\''/i\\
        # Make EGL headers optional when using OpenGL Core\\
        need_egl = not get_option('\''opengl_core'\'')\\
        ' meson.build
        
        # Update the if condition
        sed -i '' 's/if cc.has_header/if (not need_egl) or cc.has_header/g' meson.build

    # Step 8: Build QEMU with OpenGL Core
    - name: Build QEMU with OpenGL Core
      run: |
        # Enable bash debugging
        set -x
        
        # First check (but don't modify) the epoxy.pc file
        EPOXY_PC="$(brew --prefix)/opt/qemu-virgl-deps/lib/qemu-virgl/pkgconfig/epoxy.pc"
        if [ -f "$EPOXY_PC" ]; then
          echo "epoxy.pc content:"
          cat "$EPOXY_PC"
        else
          echo "ERROR: epoxy.pc not found at $EPOXY_PC"
          ls -la "$(dirname "$EPOXY_PC")"
          exit 1
        fi
        
        # Verify epoxy.pc has the correct EGL flag for OpenGL Core
        if grep -q "epoxy_has_egl=0" "$EPOXY_PC"; then
          echo "OpenGL Core build: epoxy_has_egl=0 is correctly set"
        else
          echo "WARNING: epoxy.pc does not have epoxy_has_egl=0 as expected"
          grep "epoxy_has_egl" "$EPOXY_PC" || echo "No epoxy_has_egl variable found"
        fi
        
        # Fix the path extraction to avoid path duplication
        EPOXY_INCLUDE_DIR=$(grep includedir= "$EPOXY_PC" | head -1 | cut -d'=' -f2 | sed 's|/epoxy$||')
        if [ -z "$EPOXY_INCLUDE_DIR" ]; then
          echo "WARNING: includedir not found in epoxy.pc, using fallback"
          EPOXY_INCLUDE_DIR="$(brew --prefix)/opt/qemu-virgl-deps/include/qemu-virgl"
        fi
        
        echo "EPOXY_INCLUDE_DIR=$EPOXY_INCLUDE_DIR"
        
        # Create stub EGL header directly in the epoxy directory
        sudo mkdir -p "${EPOXY_INCLUDE_DIR}/epoxy"
        if [ $? -ne 0 ]; then
          echo "ERROR: Failed to create directory ${EPOXY_INCLUDE_DIR}/epoxy"
          ls -la "$(dirname "$EPOXY_INCLUDE_DIR")" || echo "Cannot list parent directory"
          exit 1
        fi
        
        # Create the EGL stub header
        sudo bash -c "echo '/* Stub EGL header for OpenGL Core build */' > ${EPOXY_INCLUDE_DIR}/epoxy/egl.h"
        if [ $? -ne 0 ]; then
          echo "ERROR: Failed to create EGL stub header"
          echo "Permissions on directory:"
          ls -la "${EPOXY_INCLUDE_DIR}/epoxy"
          exit 1
        fi
        
        # NOW ACTUALLY BUILD QEMU with OpenGL Core profile
        cd source/qemu
        echo "Configuring QEMU with OpenGL Core..."
        
        # Set environment variables for the build
        export PKG_CONFIG_PATH="$(brew --prefix)/opt/qemu-virgl-deps/lib/qemu-virgl/pkgconfig:$PKG_CONFIG_PATH"
        
        # Configure and build QEMU
        mkdir -p build
        cd build
        
        # FIXED CONFIGURE COMMAND with disabled optional dependencies
        ../configure --disable-cocoa --enable-opengl --enable-sdl --prefix=/usr/local \
          --extra-cflags="-DGETXATTR_OPTIONAL=1 -DSETXATTR_OPTIONAL=1"
        
        # Check configure output for OpenGL
        if grep -q "OpenGL.*yes" config-host.mak; then
          echo "OpenGL support: ENABLED"
        else
          echo "ERROR: OpenGL support not enabled!"
          cat config-host.mak | grep -i opengl
          exit 1
        fi
        
        # Build QEMU
        make -j$(sysctl -n hw.ncpu)
        
        # Verify the binary exists
        if [ -f "qemu-system-x86_64" ]; then
          echo "QEMU binary built successfully!"
          ls -la qemu-system-x86_64
          file qemu-system-x86_64
        else
          echo "ERROR: Failed to build QEMU binary!"
          exit 1
        fi

    # Step 8.1: Test EGL flag in epoxy.pc
    - name: Test EGL flag in epoxy.pc
      run: |
        EPOXY_PC="$(brew --prefix qemu-virgl-deps)/lib/qemu-virgl/pkgconfig/epoxy.pc"
        echo "Original epoxy.pc:"
        cat "$EPOXY_PC"
        
        # Instead of trying to write to the file directly, verify it's correct
        if grep -q "epoxy_has_egl=0" "$EPOXY_PC"; then
          echo "OpenGL Core build: epoxy_has_egl=0 is correctly set"
        elif grep -q "epoxy_has_egl=1" "$EPOXY_PC"; then
          echo "ANGLE build: epoxy_has_egl=1 is correctly set"
        else
          echo "ERROR: Neither epoxy_has_egl=0 nor epoxy_has_egl=1 found in epoxy.pc"
          exit 1
        fi

    # Step 9: Verify QEMU execution
    - name: Verify QEMU execution
      run: |
        # Make sure we're looking at the right QEMU binary
        cd source/qemu/build
        if [ -f "qemu-system-x86_64" ]; then
          QEMU_BIN="$(pwd)/qemu-system-x86_64"
          echo "Found QEMU binary at: $QEMU_BIN"
          
          # Verify it's executable
          chmod +x "$QEMU_BIN"
          
          # Run the QEMU binary using qemu-virgl with SDL and Core profile
          qemu-virgl "$QEMU_BIN" -display sdl,gl=core --version
        else
          echo "ERROR: QEMU binary not found!"
          find . -name "qemu-system-*" -type f | sort
          exit 1
        fi
      
    # Step 10: Create binary package
    - name: Create binary package
      run: |
        mkdir -p artifacts
        cd source/qemu
        make install DESTDIR=$(pwd)/../../artifacts/qemu-8.2.10-opengl-core
        cd ../../
        tar -czf qemu-8.2.10-opengl-core.tar.gz -C artifacts qemu-8.2.10-opengl-core

    # Step 11: Upload artifacts
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: qemu-8.2.10-opengl-core
        path: qemu-8.2.10-opengl-core.tar.gz
        retention-days: 7

  standard-build:
    runs-on: macos-latest
    name: Standard build with ANGLE
    
    steps:
    # Step 1: Check out the repository
    - name: Checkout repository
      uses: actions/checkout@v4

    # Step 1.1: Enable GitHub Actions debug logging
    - name: Enable GitHub Actions debug logging
      run: echo "ACTIONS_RUNNER_DEBUG=true" >> $GITHUB_ENV

    # Step 2: Fix ANGLE pkg-config files
    - name: Update ANGLE pkg-config files
      run: |
        # Create macOS-compatible versions of the pkg-config files
        cat > angle/egl.pc << EOF
        prefix=$(pwd)/angle
        exec_prefix=\${prefix}
        libdir=\${prefix}
        includedir=\${prefix}/include

        Name: egl
        Description: ANGLE EGL implementation for macOS
        Version: 18.2.8
        Libs: -framework OpenGL
        Cflags: -I\${includedir}
        EOF

        cat > angle/glesv2.pc << EOF
        prefix=$(pwd)/angle
        exec_prefix=\${prefix}
        libdir=\${prefix}
        includedir=\${prefix}/include

        Name: glesv2
        Description: ANGLE OpenGL ES 2.0 implementation for macOS
        Version: 18.2.8
        Libs: -framework OpenGL
        Cflags: -I\${includedir}
        EOF

        echo "Updated pkg-config files:"
        cat angle/egl.pc
        cat angle/glesv2.pc

    # Step 3: Tap the repository
    - name: Tap the repository
      run: |
        brew tap startergo/homebrew-qemu-virgl-deps

    # Step 4: Install formula for standard build with ANGLE
    - name: Install formula with ANGLE support
      run: |
        echo "Installing with ANGLE/EGL support..."
        
        # Export the full absolute path to ANGLE headers
        export ANGLE_HEADERS_PATH="$(pwd)/angle"
        echo "Using ANGLE headers from: $ANGLE_HEADERS_PATH"
        ls -la $ANGLE_HEADERS_PATH
        ls -la $ANGLE_HEADERS_PATH/include
        
        # Make sure pkg-config can find our custom .pc files
        export PKG_CONFIG_PATH="$ANGLE_HEADERS_PATH:$PKG_CONFIG_PATH"
        pkg-config --exists egl || echo "egl.pc not found in pkg-config path"
        pkg-config --exists glesv2 || echo "glesv2.pc not found in pkg-config path"
        
        # Try installing our formula with debug output
        HOMEBREW_NO_INSTALL_CLEANUP=1 HOMEBREW_NO_AUTO_UPDATE=1 HOMEBREW_MAKE_JOBS=1 brew install -v qemu-virgl-deps || {
          echo "Formula installation failed, checking logs:"
          for log in /Users/runner/Library/Logs/Homebrew/qemu-virgl-deps/*; do
            echo "=== $log ==="
            cat $log
          done
          
          # Try direct build without the formula for debugging
          git clone https://github.com/akihikodaki/libepoxy.git --branch macos libepoxy-angle
          cd libepoxy-angle
          
          export CFLAGS="-I$ANGLE_HEADERS_PATH/include -F/Library/Developer/CommandLineTools/SDKs/MacOSX14.sdk/System/Library/Frameworks"
          export CPPFLAGS="$CFLAGS"
          export PKG_CONFIG_PATH="$ANGLE_HEADERS_PATH:$PKG_CONFIG_PATH"
          
          mkdir build
          cd build
          meson setup .. -Degl=yes -Dglx=no -Dx11=false --prefix=$HOME/libepoxy
          meson compile
          
          exit 1
        }

    # Step 4.5: Ensure helper scripts are in PATH
    - name: Setup PATH for helper scripts
      run: |
        # Add the formula's bin directory to PATH
        export PATH="$(brew --prefix)/opt/qemu-virgl-deps/bin:$PATH"
        echo "PATH=$PATH" >> $GITHUB_ENV
        
        # Check if the scripts exist and are executable
        ls -la $(brew --prefix)/opt/qemu-virgl-deps/bin/
        
        # Test if we can find the scripts now
        which fetch-qemu-version
        which apply-3dfx-patches
        which compile-qemu-virgl

    # Step 5: Fetch QEMU source
    - name: Fetch QEMU source
      run: |
        fetch-qemu-version 9.2.1 source/qemu

    # Step 6: Configure and build QEMU with improved virglrenderer configuration
    - name: Configure and build QEMU
      run: |
        # Ensure we know where virglrenderer is
        VIRGL_PC_PATH=$(find $(brew --prefix) -name "virglrenderer.pc" 2>/dev/null || echo "")
        if [ -z "$VIRGL_PC_PATH" ]; then
          echo "WARNING: virglrenderer.pc not found in Homebrew prefix"
          # It might be installed as part of qemu-virgl-deps or another formula
          VIRGL_PC_PATH=$(find $(brew --prefix)/opt -name "virglrenderer.pc" 2>/dev/null || echo "")
        fi
        
        if [ -n "$VIRGL_PC_PATH" ]; then
          echo "Found virglrenderer.pc at: $VIRGL_PC_PATH"
          VIRGL_PC_DIR=$(dirname "$VIRGL_PC_PATH")
          echo "Adding virglrenderer pkg-config path: $VIRGL_PC_DIR"
          export PKG_CONFIG_PATH="$VIRGL_PC_DIR:$(brew --prefix)/opt/qemu-virgl-deps/lib/qemu-virgl/pkgconfig:$PKG_CONFIG_PATH"
        else
          echo "ERROR: Could not find virglrenderer.pc anywhere!"
          # Try with default paths anyway
          export PKG_CONFIG_PATH="$(brew --prefix)/lib/pkgconfig:$(brew --prefix)/opt/qemu-virgl-deps/lib/qemu-virgl/pkgconfig:$PKG_CONFIG_PATH"
        fi
        
        # Test pkg-config configuration
        echo "Testing pkg-config paths for virglrenderer:"
        pkg-config --list-all | grep virgl || echo "virglrenderer not found in pkg-config"
        
        # Try compile-qemu-virgl with environment set up
        echo "Configuring QEMU with virglrenderer..."
        compile-qemu-virgl source/qemu
        cd source/qemu/build && make -j$(sysctl -n hw.ncpu)

    # Step 7: Verify QEMU execution
    - name: Verify QEMU execution
      run: |
        qemu-virgl $(brew --prefix)/bin/qemu-system-x86_64 -display cocoa,gl=es --version
      
    # Step 8: Create binary package
    - name: Create binary package
      run: |
        mkdir -p artifacts
        cd source/qemu
        make install DESTDIR=$(pwd)/../../artifacts/qemu-9.2.1-standard
        cd ../../
        tar -czf qemu-9.2.1-standard.tar.gz -C artifacts qemu-9.2.1-standard

    # Step 9: Upload artifacts
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: qemu-9.2.1-standard
        path: qemu-9.2.1-standard.tar.gz
        retention-days: 7
